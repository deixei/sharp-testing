# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(64)
def test_dp_1_discover_classify_and_label_sensitive_data(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-1 - Discover, classify, and label sensitive data
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-1 - Discover, classify, and label sensitive data', 'name': 'dp_1_discover_classify_and_label_sensitive_data', 'id': 64}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=64
	test_case_description="DP-1 - Discover, classify, and label sensitive data"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(65)
def test_dp_2_monitor_anomalies_and_threats_targeting_sensitive_data(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-2 - Monitor anomalies and threats targeting sensitive data
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-2 - Monitor anomalies and threats targeting sensitive data', 'name': 'dp_2_monitor_anomalies_and_threats_targeting_sensitive_data', 'id': 65}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=65
	test_case_description="DP-2 - Monitor anomalies and threats targeting sensitive data"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(66)
def test_dp_3_encrypt_sensitive_data_in_transit(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-3 - Encrypt sensitive data in transit
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-3 - Encrypt sensitive data in transit', 'name': 'dp_3_encrypt_sensitive_data_in_transit', 'id': 66}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=66
	test_case_description="DP-3 - Encrypt sensitive data in transit"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(67)
def test_dp_4_enable_data_at_rest_encryption_by_default(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-4 - Enable data at rest encryption by default
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-4 - Enable data at rest encryption by default', 'name': 'dp_4_enable_data_at_rest_encryption_by_default', 'id': 67}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=67
	test_case_description="DP-4 - Enable data at rest encryption by default"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(68)
def test_dp_5_use_customer_managed_key_option_in_data_at_rest_encryption_when_required(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-5 - Use customer-managed key option in data at rest encryption when required
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-5 - Use customer-managed key option in data at rest encryption when required', 'name': 'dp_5_use_customer_managed_key_option_in_data_at_rest_encryption_when_required', 'id': 68}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=68
	test_case_description="DP-5 - Use customer-managed key option in data at rest encryption when required"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(69)
def test_dp_6_use_a_secure_key_management_process(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-6 - Use a secure key management process
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-6 - Use a secure key management process', 'name': 'dp_6_use_a_secure_key_management_process', 'id': 69}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=69
	test_case_description="DP-6 - Use a secure key management process"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(70)
def test_dp_7_use_a_secure_certificate_management_process(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-7 - Use a secure certificate management process
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-7 - Use a secure certificate management process', 'name': 'dp_7_use_a_secure_certificate_management_process', 'id': 70}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=70
	test_case_description="DP-7 - Use a secure certificate management process"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(71)
def test_dp_8_ensure_security_of_key_and_certificate_repository(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DP-8 - Ensure security of key and certificate repository
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DP-8 - Ensure security of key and certificate repository', 'name': 'dp_8_ensure_security_of_key_and_certificate_repository', 'id': 71}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=71
	test_case_description="DP-8 - Ensure security of key and certificate repository"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

