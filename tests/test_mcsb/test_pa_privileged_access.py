# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(55)
def test_pa_1_separate_and_limit_highly_privileged_administrative_users(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-1 - Separate and limit highly privileged-administrative users
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-1 - Separate and limit highly privileged-administrative users', 'name': 'pa_1_separate_and_limit_highly_privileged_administrative_users', 'id': 55}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=55
	test_case_description="PA-1 - Separate and limit highly privileged-administrative users"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(56)
def test_pa_2_avoid_standing_access_for_user_accounts_and_permissions(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-2 - Avoid standing access for user accounts and permissions
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-2 - Avoid standing access for user accounts and permissions', 'name': 'pa_2_avoid_standing_access_for_user_accounts_and_permissions', 'id': 56}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=56
	test_case_description="PA-2 - Avoid standing access for user accounts and permissions"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(57)
def test_pa_3_manage_lifecycle_of_identities_and_entitlements(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-3 - Manage lifecycle of identities and entitlements
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-3 - Manage lifecycle of identities and entitlements', 'name': 'pa_3_manage_lifecycle_of_identities_and_entitlements', 'id': 57}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=57
	test_case_description="PA-3 - Manage lifecycle of identities and entitlements"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(58)
def test_pa_4_review_and_reconcile_user_access_regularly(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-4 - Review and reconcile user access regularly
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-4 - Review and reconcile user access regularly', 'name': 'pa_4_review_and_reconcile_user_access_regularly', 'id': 58}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=58
	test_case_description="PA-4 - Review and reconcile user access regularly"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(59)
def test_pa_5_set_up_emergency_access(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-5 - Set up emergency access
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-5 - Set up emergency access', 'name': 'pa_5_set_up_emergency_access', 'id': 59}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=59
	test_case_description="PA-5 - Set up emergency access"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(60)
def test_pa_6_use_privileged_access_workstations_channel_for_administrative_tasks(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-6 - Use privileged access workstations-channel for administrative tasks
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-6 - Use privileged access workstations-channel for administrative tasks', 'name': 'pa_6_use_privileged_access_workstations_channel_for_administrative_tasks', 'id': 60}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=60
	test_case_description="PA-6 - Use privileged access workstations-channel for administrative tasks"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(61)
def test_pa_7_follow_just_enough_administration_least_privilege_principle(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-7 - Follow just enough administration (least privilege) principle
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-7 - Follow just enough administration (least privilege) principle', 'name': 'pa_7_follow_just_enough_administration_least_privilege_principle', 'id': 61}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=61
	test_case_description="PA-7 - Follow just enough administration (least privilege) principle"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(62)
def test_pa_8_determine_access_process_for_cloud_provider_support(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	PA-8 - Determine access process for cloud provider support
	Details:{'configuration': {'name': 'base_config'}, 'description': 'PA-8 - Determine access process for cloud provider support', 'name': 'pa_8_determine_access_process_for_cloud_provider_support', 'id': 62}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=62
	test_case_description="PA-8 - Determine access process for cloud provider support"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

