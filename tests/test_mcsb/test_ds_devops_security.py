# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(112)
def test_ds_1_conduct_threat_modeling(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-1 - Conduct threat modeling
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-1 - Conduct threat modeling', 'name': 'ds_1_conduct_threat_modeling', 'id': 112}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=112
	test_case_description="DS-1 - Conduct threat modeling"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(113)
def test_ds_2_ensure_software_supply_chain_security(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-2 - Ensure software supply chain security
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-2 - Ensure software supply chain security', 'name': 'ds_2_ensure_software_supply_chain_security', 'id': 113}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=113
	test_case_description="DS-2 - Ensure software supply chain security"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(114)
def test_ds_3_secure_devops_infrastructure(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-3 - Secure DevOps infrastructure
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-3 - Secure DevOps infrastructure', 'name': 'ds_3_secure_devops_infrastructure', 'id': 114}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=114
	test_case_description="DS-3 - Secure DevOps infrastructure"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(115)
def test_ds_4_integrate_static_application_security_testing_into_devops_pipeline(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-4 - Integrate static application security testing into DevOps pipeline
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-4 - Integrate static application security testing into DevOps pipeline', 'name': 'ds_4_integrate_static_application_security_testing_into_devops_pipeline', 'id': 115}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=115
	test_case_description="DS-4 - Integrate static application security testing into DevOps pipeline"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(116)
def test_ds_5_integrate_dynamic_application_security_testing_into_devops_pipeline(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-5 - Integrate dynamic application security testing into DevOps pipeline
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-5 - Integrate dynamic application security testing into DevOps pipeline', 'name': 'ds_5_integrate_dynamic_application_security_testing_into_devops_pipeline', 'id': 116}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=116
	test_case_description="DS-5 - Integrate dynamic application security testing into DevOps pipeline"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(117)
def test_ds_6_enforce_security_of_workload_throughout_devops_lifecycle(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-6 - Enforce security of workload throughout DevOps lifecycle
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-6 - Enforce security of workload throughout DevOps lifecycle', 'name': 'ds_6_enforce_security_of_workload_throughout_devops_lifecycle', 'id': 117}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=117
	test_case_description="DS-6 - Enforce security of workload throughout DevOps lifecycle"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(118)
def test_ds_7_enable_logging_and_monitoring_in_devops(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	DS-7 - Enable logging and monitoring in DevOps
	Details:{'configuration': {'name': 'base_config'}, 'description': 'DS-7 - Enable logging and monitoring in DevOps', 'name': 'ds_7_enable_logging_and_monitoring_in_devops', 'id': 118}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=118
	test_case_description="DS-7 - Enable logging and monitoring in DevOps"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

