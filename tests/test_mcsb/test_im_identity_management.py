# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(45)
def test_im_1_use_centralized_identity_and_authentication_system(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-1 - Use centralized identity and authentication system
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-1 - Use centralized identity and authentication system', 'name': 'im_1_use_centralized_identity_and_authentication_system', 'id': 45}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=45
	test_case_description="IM-1 - Use centralized identity and authentication system"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(46)
def test_im_2_protect_identity_and_authentication_systems(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-2 - Protect identity and authentication systems
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-2 - Protect identity and authentication systems', 'name': 'im_2_protect_identity_and_authentication_systems', 'id': 46}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=46
	test_case_description="IM-2 - Protect identity and authentication systems"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(47)
def test_im_3_manage_application_identities_securely_and_automatically(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-3 - Manage application identities securely and automatically
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-3 - Manage application identities securely and automatically', 'name': 'im_3_manage_application_identities_securely_and_automatically', 'id': 47}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=47
	test_case_description="IM-3 - Manage application identities securely and automatically"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(48)
def test_im_4_authenticate_server_and_services(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-4 - Authenticate server and services
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-4 - Authenticate server and services', 'name': 'im_4_authenticate_server_and_services', 'id': 48}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=48
	test_case_description="IM-4 - Authenticate server and services"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(49)
def test_im_5_use_single_sign_on_sso_for_application_access(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-5 - Use single sign-on (SSO) for application access
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-5 - Use single sign-on (SSO) for application access', 'name': 'im_5_use_single_sign_on_sso_for_application_access', 'id': 49}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=49
	test_case_description="IM-5 - Use single sign-on (SSO) for application access"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(50)
def test_im_6_use_strong_authentication_controls(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-6 - Use strong authentication controls
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-6 - Use strong authentication controls', 'name': 'im_6_use_strong_authentication_controls', 'id': 50}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=50
	test_case_description="IM-6 - Use strong authentication controls"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(51)
def test_im_7_restrict_resource_access_based_on_conditions"(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-7 - Restrict resource access based on  conditions
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-7 - Restrict resource access based on  conditions', 'name': 'im_7_restrict_resource_access_based_on_conditions"', 'id': 51}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=51
	test_case_description="IM-7 - Restrict resource access based on  conditions"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(52)
def test_im_8_restrict_the_exposure_of_credential_and_secrets(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-8 - Restrict the exposure of credential and secrets
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-8 - Restrict the exposure of credential and secrets', 'name': 'im_8_restrict_the_exposure_of_credential_and_secrets', 'id': 52}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=52
	test_case_description="IM-8 - Restrict the exposure of credential and secrets"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(53)
def test_im_9_secure_user_access_to_existing_applications(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IM-9 - Secure user access to  existing applications
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IM-9 - Secure user access to  existing applications', 'name': 'im_9_secure_user_access_to_existing_applications', 'id': 53}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=53
	test_case_description="IM-9 - Secure user access to  existing applications"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

