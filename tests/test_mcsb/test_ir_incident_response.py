# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(87)
def test_ir_1_preparation_update_incident_response_plan_and_handling_process(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-1 - Preparation - update incident response plan and handling process
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-1 - Preparation - update incident response plan and handling process', 'name': 'ir_1_preparation_update_incident_response_plan_and_handling_process', 'id': 87}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=87
	test_case_description="IR-1 - Preparation - update incident response plan and handling process"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(88)
def test_ir_2_preparation_setup_incident_contact_information(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-2 - Preparation - setup incident contact information
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-2 - Preparation - setup incident contact information', 'name': 'ir_2_preparation_setup_incident_contact_information', 'id': 88}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=88
	test_case_description="IR-2 - Preparation - setup incident contact information"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(89)
def test_ir_3_detection_and_analysis_create_incidents_based_on_high_quality_alerts(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-3 - Detection and analysis - create incidents based on high-quality alerts
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-3 - Detection and analysis - create incidents based on high-quality alerts', 'name': 'ir_3_detection_and_analysis_create_incidents_based_on_high_quality_alerts', 'id': 89}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=89
	test_case_description="IR-3 - Detection and analysis - create incidents based on high-quality alerts"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(90)
def test_ir_4_detection_and_analysis_investigate_an_incident(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-4 - Detection and analysis - investigate an incident
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-4 - Detection and analysis - investigate an incident', 'name': 'ir_4_detection_and_analysis_investigate_an_incident', 'id': 90}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=90
	test_case_description="IR-4 - Detection and analysis - investigate an incident"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(91)
def test_ir_5_detection_and_analysis_prioritize_incidents(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-5 - Detection and analysis - prioritize incidents
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-5 - Detection and analysis - prioritize incidents', 'name': 'ir_5_detection_and_analysis_prioritize_incidents', 'id': 91}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=91
	test_case_description="IR-5 - Detection and analysis - prioritize incidents"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(92)
def test_ir_6_containment_eradication_and_recovery_automate_the_incident_handling(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-6 - Containment, eradication and recovery - automate the incident handling
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-6 - Containment, eradication and recovery - automate the incident handling', 'name': 'ir_6_containment_eradication_and_recovery_automate_the_incident_handling', 'id': 92}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=92
	test_case_description="IR-6 - Containment, eradication and recovery - automate the incident handling"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(93)
def test_ir_7_post_incident_activity_conduct_lesson_learned_and_retain_evidence(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	IR-7 - Post-incident activity - conduct lesson learned and retain evidence
	Details:{'configuration': {'name': 'base_config'}, 'description': 'IR-7 - Post-incident activity - conduct lesson learned and retain evidence', 'name': 'ir_7_post_incident_activity_conduct_lesson_learned_and_retain_evidence', 'id': 93}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=93
	test_case_description="IR-7 - Post-incident activity - conduct lesson learned and retain evidence"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

