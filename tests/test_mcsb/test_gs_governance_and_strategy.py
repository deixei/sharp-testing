# This is autogenerated test suite file for sharp testing
import os
import pytest
from pytestsharp import PyTestSharp

@pytest.mark.test_id(120)
def test_gs_1_align_organization_roles_responsibilities_and_accountabilities(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-1 - Align organization roles, responsibilities and accountabilities
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-1 - Align organization roles, responsibilities and accountabilities', 'name': 'gs_1_align_organization_roles_responsibilities_and_accountabilities', 'id': 120}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=120
	test_case_description="GS-1 - Align organization roles, responsibilities and accountabilities"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(121)
def test_gs_2_define_and_implement_enterprise_segmentation_separation_of_duties_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-2 - Define and implement enterprise segmentation/separation of duties strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-2 - Define and implement enterprise segmentation/separation of duties strategy', 'name': 'gs_2_define_and_implement_enterprise_segmentation_separation_of_duties_strategy', 'id': 121}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=121
	test_case_description="GS-2 - Define and implement enterprise segmentation/separation of duties strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(122)
def test_gs_3_define_and_implement_data_protection_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-3 - Define and implement data protection strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-3 - Define and implement data protection strategy', 'name': 'gs_3_define_and_implement_data_protection_strategy', 'id': 122}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=122
	test_case_description="GS-3 - Define and implement data protection strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(123)
def test_gs_4_define_and_implement_network_security_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-4 - Define and implement network security strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-4 - Define and implement network security strategy', 'name': 'gs_4_define_and_implement_network_security_strategy', 'id': 123}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=123
	test_case_description="GS-4 - Define and implement network security strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(124)
def test_gs_5_define_and_implement_security_posture_management_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-5 - Define and implement security posture management strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-5 - Define and implement security posture management strategy', 'name': 'gs_5_define_and_implement_security_posture_management_strategy', 'id': 124}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=124
	test_case_description="GS-5 - Define and implement security posture management strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(125)
def test_gs_6_define_and_implement_identity_and_privileged_access_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-6 - Define and implement identity and privileged access strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-6 - Define and implement identity and privileged access strategy', 'name': 'gs_6_define_and_implement_identity_and_privileged_access_strategy', 'id': 125}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=125
	test_case_description="GS-6 - Define and implement identity and privileged access strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(126)
def test_gs_7_define_and_implement_logging_threat_detection_and_incident_response_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-7 - Define and implement logging, threat detection and incident response strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-7 - Define and implement logging, threat detection and incident response strategy', 'name': 'gs_7_define_and_implement_logging_threat_detection_and_incident_response_strategy', 'id': 126}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=126
	test_case_description="GS-7 - Define and implement logging, threat detection and incident response strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(127)
def test_gs_8_define_and_implement_backup_and_recovery_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-8 - Define and implement backup and recovery strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-8 - Define and implement backup and recovery strategy', 'name': 'gs_8_define_and_implement_backup_and_recovery_strategy', 'id': 127}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=127
	test_case_description="GS-8 - Define and implement backup and recovery strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(128)
def test_gs_9_define_and_implement_endpoint_security_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-9 - Define and implement endpoint security strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-9 - Define and implement endpoint security strategy', 'name': 'gs_9_define_and_implement_endpoint_security_strategy', 'id': 128}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=128
	test_case_description="GS-9 - Define and implement endpoint security strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(129)
def test_gs_10_define_and_implement_devops_security_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-10 - Define and implement DevOps security strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-10 - Define and implement DevOps security strategy', 'name': 'gs_10_define_and_implement_devops_security_strategy', 'id': 129}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=129
	test_case_description="GS-10 - Define and implement DevOps security strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True


@pytest.mark.test_id(130)
def test_gs_11_define_and_implement_multi_cloud_security_strategy(ado_config, test_run_id, test_result_id, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret):
	"""
	GS-11 - Define and implement multi-cloud security strategy
	Details:{'configuration': {'name': 'base_config'}, 'description': 'GS-11 - Define and implement multi-cloud security strategy', 'name': 'gs_11_define_and_implement_multi_cloud_security_strategy', 'id': 130}

	Args:
		ado_config: The ADO configuration.
		test_run_id: The ID of the test run.
		test_result_id: The ID of the test result.
		ado_url: The ADO URL.
		ado_pat: The ADO PAT.
		ado_project: The ADO Project.
		print_verbose: The verbosity level.
		azure_tenant: The Azure Tenant.
		azure_client_id: The Azure Client ID.
		azure_secret: The Azure Secret.

	Returns:
		None
	"""
	work_item_id=130
	test_case_description="GS-11 - Define and implement multi-cloud security strategy"
	sharp = PyTestSharp(ado_config, test_run_id, test_result_id, work_item_id, test_case_description, ado_url, ado_pat, ado_project, print_verbose, azure_tenant, azure_client_id, azure_secret)

	sharp.show_inputs()

	assert True

