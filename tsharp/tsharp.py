import os
import yaml

from tsharp_base import TSharpBase, TSharpConfig
from tsharp_variables import TestVariables
from tsharp_configurations import TestConfigurations
from tsharp_test_plans import TestPlans
from tsharp_test_suites import TestSuites
from tsharp_workitems import WorkItem

test_workplace = "/home/marcio/repos/deixei/sharp-testing/tests"

target_ado_project = "deixei" ## /{self.project}/

class Main(TSharpBase):
    def __init__(self):
        super().__init__()

        script_dir = os.path.dirname(os.path.realpath(__file__))
        self.yaml_config = TSharpConfig(script_dir, "config.yaml", load_on_init=True)

        self.config = self.yaml_config.config
        
        # TODO: param to control the execution
        self.update_variables()
        self.update_configurations()
        self.update_test_plans()

        self.yaml_config.save()

    def run(self):
        print(f"# This is TSharp.")
        # pretty print the config in yaml format
        print(yaml.dump(self.config))

    def update_variables(self):
        print("## Updating variables")
        test_variables = TestVariables()
        for test_variable in self.config["variables"]:
            item = test_variables.create_test_variable_if_not_exists(test_variable)
            test_variable["id"] = item["id"]

    def update_configurations(self):
        print("## Updating configurations")
        test_configurations = TestConfigurations()
        for test_configuration in self.config["configurations"]:
            item = test_configurations.create_test_configuration_if_not_exists(test_configuration)
            test_configuration["id"] = item["id"]

    def set_test_folder(self, folder):
        test_folder = os.path.join(test_workplace, f"test_{folder}")
        # create the folder if it does not exist
        if not os.path.exists(test_folder):
            os.makedirs(test_folder)

        return test_folder
    
    def set_test_file(self, folder, file):
        ##test_folder = self.set_test_folder(folder)
        test_file = os.path.join(folder, f"test_{file}.py")
        # create the file if it does not exist
        if not os.path.exists(test_file):
            with open(test_file, 'w') as f:
                f.write("# This is autogenerated test suite file for sharp testing\n")
                f.write("import os\n")
                f.write("import pytest\n")


        return test_file

    def set_test_function(self, file, function_name, test_case, work_item):
        # create the function if it does not exist
        with open(file, 'r') as f:
            lines = f.readlines()
            for line in lines:
                if f"def test_{function_name}(" in line:
                    return

        with open(file, 'a') as f:
            f.write(f"\n")
            f.write(f"@pytest.mark.test_id({work_item['id']})\n")
            f.write(f"def test_{function_name}(ado_config, test_run_id, test_result_id):\n")

            f.write(f"\t\"\"\"\n")
            f.write(f"\t{test_case['description']}\n")
            f.write(f"\tDetails:{test_case}\n")
            f.write(f"\n")
            f.write(f"\tArgs:\n")
            f.write(f"\t\tado_config: The ADO configuration.\n")
            f.write(f"\t\ttest_run_id: The ID of the test run.\n")
            f.write(f"\t\ttest_result_id: The ID of the test result.\n")
            f.write(f"\n")
            f.write(f"\tReturns:\n")
            f.write(f"\t\tNone\n")
            f.write(f"\t\"\"\"\n")

            f.write(f"\twork_item_id={work_item['id']}\n")
            f.write(f"\ttest_case_description=\"{test_case['description']}\"\n")

            f.write(f"\tprint(\"ado_config:\", ado_config)\n")
            f.write(f"\tprint(\"test_run_id:\", test_run_id)\n")
            f.write(f"\tprint(\"test_result_id:\", test_result_id)\n")
            
            f.write(f"\tassert True\n")
            f.write(f"\n")

    def update_test_plans(self):
        print("## Updating test plans")
        test_plans = TestPlans()
        for test_plan in self.config["test_plans"]:
            tp = test_plans.create_test_plan_if_not_exists(test_plan["name"], test_plan["description"])

            f = self.set_test_folder(test_plan["name"])

            test_plan_id = tp["id"]
            test_plan["id"] = test_plan_id

            root_suite_id = tp["rootSuite"]["id"]
            test_suites = TestSuites(test_plan_id, root_suite_id)
            print(f"PlanId: {test_plan_id}")
            #print(tp)
            print("### Updating test suites")
            for test_suite in test_plan.get("test_suites", []):
                test_suite_name = test_suite["name"]
                ts = test_suites.create_test_suite_if_not_exists(test_suite_name, test_suite["description"])

                t = self.set_test_file(f, test_suite_name)

                test_suite_id = ts["id"]
                test_suite["id"] = test_suite_id
                print("Test Suite")
                #print(ts)
                for test_case in test_suite.get("test_cases", []):
                    print("Test Case")
                    print(test_case)
                    test_case_id = test_case.get("id", 0)
                    work_item = WorkItem("Test Case", test_case["name"], test_case_id)
                    work_item.description = test_case.get("description", "")
                    work_item.test_plan = test_plan["name"]
                    work_item.suite_name = test_suite_name


                    work_item.get()
                    wi = work_item.create_if_not_exists()
                    print("Work Item")
                    print(wi)
                    test_case["id"] = wi["id"]

                    self.set_test_function(t, test_case["name"], test_case, wi)

                    test_suites.add_test_case(test_suite_id, test_case["id"])



if __name__ == "__main__":
    main = Main()
    main.run()

